// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");

function accessLevelModifier(param_0) {
  return /* AccessLevelModifier */Block.__(0, [param_0]);
}

function mutationModifier(param_0) {
  return /* MutationModifier */Block.__(1, [param_0]);
}

function $$boolean(param_0) {
  return /* Boolean */Block.__(0, [param_0]);
}

function integer(param_0) {
  return /* Integer */Block.__(1, [param_0]);
}

function floatingPoint(param_0) {
  return /* FloatingPoint */Block.__(2, [param_0]);
}

function string(param_0) {
  return /* String */Block.__(3, [param_0]);
}

function color(param_0) {
  return /* Color */Block.__(4, [param_0]);
}

function array(param_0) {
  return /* Array */Block.__(5, [param_0]);
}

function typeName(param_0) {
  return /* TypeName */Block.__(0, [param_0]);
}

function typeIdentifier(param_0) {
  return /* TypeIdentifier */Block.__(1, [param_0]);
}

function arrayType(param_0) {
  return /* ArrayType */Block.__(2, [param_0]);
}

function dictionaryType(param_0) {
  return /* DictionaryType */Block.__(3, [param_0]);
}

function optionalType(param_0) {
  return /* OptionalType */Block.__(4, [param_0]);
}

function typeInheritanceList(param_0) {
  return /* TypeInheritanceList */Block.__(5, [param_0]);
}

function identifierPattern(param_0) {
  return /* IdentifierPattern */Block.__(0, [param_0]);
}

function valueBindingPattern(param_0) {
  return /* ValueBindingPattern */Block.__(1, [param_0]);
}

function tuplePattern(param_0) {
  return /* TuplePattern */Block.__(2, [param_0]);
}

function optionalPattern(param_0) {
  return /* OptionalPattern */Block.__(3, [param_0]);
}

function expressionPattern(param_0) {
  return /* ExpressionPattern */Block.__(4, [param_0]);
}

function willSetDidSetBlock(param_0) {
  return /* WillSetDidSetBlock */[param_0];
}

function literalExpression(param_0) {
  return /* LiteralExpression */Block.__(0, [param_0]);
}

function memberExpression(param_0) {
  return /* MemberExpression */Block.__(1, [param_0]);
}

function binaryExpression(param_0) {
  return /* BinaryExpression */Block.__(2, [param_0]);
}

function prefixExpression(param_0) {
  return /* PrefixExpression */Block.__(3, [param_0]);
}

function tryExpression(param_0) {
  return /* TryExpression */Block.__(4, [param_0]);
}

function classDeclaration(param_0) {
  return /* ClassDeclaration */Block.__(5, [param_0]);
}

function enumDeclaration(param_0) {
  return /* EnumDeclaration */Block.__(6, [param_0]);
}

function extensionDeclaration(param_0) {
  return /* ExtensionDeclaration */Block.__(7, [param_0]);
}

function swiftIdentifier(param_0) {
  return /* SwiftIdentifier */Block.__(8, [param_0]);
}

function constantDeclaration(param_0) {
  return /* ConstantDeclaration */Block.__(9, [param_0]);
}

function variableDeclaration(param_0) {
  return /* VariableDeclaration */Block.__(10, [param_0]);
}

function initializerDeclaration(param_0) {
  return /* InitializerDeclaration */Block.__(11, [param_0]);
}

function functionDeclaration(param_0) {
  return /* FunctionDeclaration */Block.__(12, [param_0]);
}

function importDeclaration(param_0) {
  return /* ImportDeclaration */Block.__(13, [param_0]);
}

function ifStatement(param_0) {
  return /* IfStatement */Block.__(14, [param_0]);
}

function returnStatement(param_0) {
  return /* ReturnStatement */Block.__(15, [param_0]);
}

function parameter(param_0) {
  return /* Parameter */Block.__(16, [param_0]);
}

function functionCallArgument(param_0) {
  return /* FunctionCallArgument */Block.__(17, [param_0]);
}

function functionCallExpression(param_0) {
  return /* FunctionCallExpression */Block.__(18, [param_0]);
}

function enumCase(param_0) {
  return /* EnumCase */Block.__(19, [param_0]);
}

function lineComment(param_0) {
  return /* LineComment */Block.__(20, [param_0]);
}

function docComment(param_0) {
  return /* DocComment */Block.__(21, [param_0]);
}

function lineEndComment(param_0) {
  return /* LineEndComment */Block.__(22, [param_0]);
}

function codeBlock(param_0) {
  return /* CodeBlock */Block.__(23, [param_0]);
}

function statementListHelper(param_0) {
  return /* StatementListHelper */Block.__(24, [param_0]);
}

function topLevelDeclaration(param_0) {
  return /* TopLevelDeclaration */Block.__(25, [param_0]);
}

var privateModifier = /* PrivateModifier */0;

var fileprivateModifier = /* FileprivateModifier */1;

var internalModifier = /* InternalModifier */2;

var publicModifier = /* PublicModifier */3;

var openModifier = /* OpenModifier */4;

var mutatingModifier = /* MutatingModifier */0;

var nonmutatingModifier = /* NonmutatingModifier */1;

var classModifier = /* ClassModifier */0;

var convenienceModifier = /* ConvenienceModifier */1;

var dynamicModifier = /* DynamicModifier */2;

var finalModifier = /* FinalModifier */3;

var infixModifier = /* InfixModifier */4;

var lazyModifier = /* LazyModifier */5;

var optionalModifier = /* OptionalModifier */6;

var overrideModifier = /* OverrideModifier */7;

var postfixModifier = /* PostfixModifier */8;

var prefixModifier = /* PrefixModifier */9;

var requiredModifier = /* RequiredModifier */10;

var staticModifier = /* StaticModifier */11;

var unownedModifier = /* UnownedModifier */12;

var unownedSafeModifier = /* UnownedSafeModifier */13;

var unownedUnsafeModifier = /* UnownedUnsafeModifier */14;

var weakModifier = /* WeakModifier */15;

var nil = /* Nil */0;

var wildcardPattern = /* WildcardPattern */0;

var empty = /* Empty */0;

exports.privateModifier        = privateModifier;
exports.fileprivateModifier    = fileprivateModifier;
exports.internalModifier       = internalModifier;
exports.publicModifier         = publicModifier;
exports.openModifier           = openModifier;
exports.mutatingModifier       = mutatingModifier;
exports.nonmutatingModifier    = nonmutatingModifier;
exports.classModifier          = classModifier;
exports.convenienceModifier    = convenienceModifier;
exports.dynamicModifier        = dynamicModifier;
exports.finalModifier          = finalModifier;
exports.infixModifier          = infixModifier;
exports.lazyModifier           = lazyModifier;
exports.optionalModifier       = optionalModifier;
exports.overrideModifier       = overrideModifier;
exports.postfixModifier        = postfixModifier;
exports.prefixModifier         = prefixModifier;
exports.requiredModifier       = requiredModifier;
exports.staticModifier         = staticModifier;
exports.unownedModifier        = unownedModifier;
exports.unownedSafeModifier    = unownedSafeModifier;
exports.unownedUnsafeModifier  = unownedUnsafeModifier;
exports.weakModifier           = weakModifier;
exports.accessLevelModifier    = accessLevelModifier;
exports.mutationModifier       = mutationModifier;
exports.nil                    = nil;
exports.$$boolean              = $$boolean;
exports.integer                = integer;
exports.floatingPoint          = floatingPoint;
exports.string                 = string;
exports.color                  = color;
exports.array                  = array;
exports.typeName               = typeName;
exports.typeIdentifier         = typeIdentifier;
exports.arrayType              = arrayType;
exports.dictionaryType         = dictionaryType;
exports.optionalType           = optionalType;
exports.typeInheritanceList    = typeInheritanceList;
exports.wildcardPattern        = wildcardPattern;
exports.identifierPattern      = identifierPattern;
exports.valueBindingPattern    = valueBindingPattern;
exports.tuplePattern           = tuplePattern;
exports.optionalPattern        = optionalPattern;
exports.expressionPattern      = expressionPattern;
exports.willSetDidSetBlock     = willSetDidSetBlock;
exports.literalExpression      = literalExpression;
exports.memberExpression       = memberExpression;
exports.binaryExpression       = binaryExpression;
exports.prefixExpression       = prefixExpression;
exports.tryExpression          = tryExpression;
exports.classDeclaration       = classDeclaration;
exports.enumDeclaration        = enumDeclaration;
exports.extensionDeclaration   = extensionDeclaration;
exports.swiftIdentifier        = swiftIdentifier;
exports.constantDeclaration    = constantDeclaration;
exports.variableDeclaration    = variableDeclaration;
exports.initializerDeclaration = initializerDeclaration;
exports.functionDeclaration    = functionDeclaration;
exports.importDeclaration      = importDeclaration;
exports.ifStatement            = ifStatement;
exports.returnStatement        = returnStatement;
exports.parameter              = parameter;
exports.functionCallArgument   = functionCallArgument;
exports.functionCallExpression = functionCallExpression;
exports.enumCase               = enumCase;
exports.empty                  = empty;
exports.lineComment            = lineComment;
exports.docComment             = docComment;
exports.lineEndComment         = lineEndComment;
exports.codeBlock              = codeBlock;
exports.statementListHelper    = statementListHelper;
exports.topLevelDeclaration    = topLevelDeclaration;
/* No side effect */
